mvn -PautoInstallPackage clean install -Dmaven.test.skip=true

Install Template

gradlew installTemplateAemSimpleMultimoduleProject

Create Project

lazybones create aem-simple-multimodule-project 0.0.1-SNAPSHOT .

lazybones create aem-simple-multimodule-project 0.0.1-SNAPSHOT . -PgroupId=apps.experienceaem.assets -PartifactId=eaem-assets-list-view-columns -PprojectName="EAEM Assets List View Columns" -PappsFolderName="eaem-assets-list-view-columns" -PpackageGroup="Experience AEM" -PaemVersion="6.3" 

<dependency>
	<groupId>org.osgi</groupId>
	<artifactId>org.osgi.service.component.annotations</artifactId>
	<version>1.3.0</version>
</dependency>
<dependency>
	<groupId>org.osgi</groupId>
	<artifactId>org.osgi.annotation</artifactId>
	<version>6.0.0</version>
</dependency>
<dependency>
	<groupId>org.osgi</groupId>
	<artifactId>org.osgi.service.metatype.annotations</artifactId>
	<version>1.3.0</version>
</dependency>

<dependency>
	<groupId>org.osgi</groupId>
	<artifactId>org.osgi.service.component.annotations</artifactId>
</dependency>
<dependency>
	<groupId>org.osgi</groupId>
	<artifactId>org.osgi.annotation</artifactId>
</dependency>
<dependency>
	<groupId>org.osgi</groupId>
	<artifactId>org.osgi.service.metatype.annotations</artifactId>
</dependency>

		
<plugin>
	<groupId>org.apache.felix</groupId>
	<artifactId>maven-bundle-plugin</artifactId>
	<version>3.2.0</version>
</plugin>
		
For AEM CLOUD SERVICES stop bundle "aem-precompiled-scripts" to debug JSPs
		
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.framework.Constants;
		
import org.json.JSONException;
import org.json.JSONObject;

@Component(
        immediate = true,
        service = Servlet.class,
        property = {
            "sling.servlet.selectors=eaemcreate",
            "sling.servlet.methods=GET",
            "sling.servlet.methods=POST",
            "sling.servlet.resourceTypes=sling/servlet/default"
        }
)

@Component(
        immediate = true,
        service = Servlet.class,
        property = {
                "sling.servlet.selectors=eaemcreate",
                "sling.servlet.methods=GET",
                "sling.servlet.paths=/bin/experience-aem/create/overlay"
        }
)

@Component(
        immediate = true,
        service = {WorkflowProcess.class},
        property = {
                "process.label = Experience AEM Create PDF From page"
        }
)

@Component(
        service = Filter.class,
        immediate = true,
        name = "Tags Sort Filter",
        property = {
            Constants.SERVICE_RANKING + ":Integer=-99",
            "sling.filter.scope=REQUEST",
            "sling.filter.pattern=/mnt/overlay/cq/gui/content/coral/common/form/tagfield/picker.*"
        }
)

@AttributeDefinition(
		name = "Metadata fields",
		description = "Metadata fields for append e.g. eaemRequired, service looks for this property of type STRING and ONLY in jcr:content/metadata",
		type = AttributeType.STRING,
		cardinality = 5
)
String[] metadataFields() default { DEFAULT_FOR_APPEND };

------------------------------

Internal AEM request with out http request and response available

    @Reference
    private SlingRequestProcessor slingRequestProcessor;

    @Reference
    private RequestResponseFactory requestResponseFactory;
	
	String requestURI = "/content/experience-fragments/barclays-ad-server/us/en/site/ad-1/master.model.json";
	
	requestResponseFactory.createRequest(requestUri);
	
	BufferedServletResponse response = this.requestResponseFactory.createResponse();
	
	slingRequestProcessor.processRequest(request, response, this.resourceResolver);

---------------------------------

get jquery anyonymous handler >

	function getTabClickHandler(){
        var handlers = $._data(document, "events")["click"];

        return _.reject(handlers, function(handler){
            return (handler.selector != "#SidePanel coral-tab" );
        })[0].handler;
    }
	
	 $document.off('click', '#SidePanel coral-tab');
	 
	 $document.on('click', '#SidePanel coral-tab', function( eve ) { });
	 
------------------------------	 

String resourcePath = slingRequest.getRequestPathInfo().getResourcePath();

private static final Logger logger = LoggerFactory.getLogger(GetWorkflowRunning.class);

import org.json.JSONException;
import org.json.JSONObject;

JSONObject workflows = new JSONObject();
workflows.put("success", true);

---------------------------------------

docker start error: failed to deploy distro docker-desktop the user has not been granted the requested logon type at this computer

services.msc, restarting the service named "Hyper-V Virtual Machine Management" and after, I restarted Docker.

------------------------------------------

private String getHtmlResponseOfComponent(String componentNodePath, ResourceResolver resourceResolver) throws ServletException, IOException { 
	HttpServletRequest req = requestResponseFactory.createRequest("GET", componentNodePath.concat(".html")); 
	WCMMode.DISABLED.toRequest(req); 
	ByteArrayOutputStream out = new ByteArrayOutputStream(); 
	HttpServletResponse resp = requestResponseFactory.createResponse(out); 
	requestProcessor.processRequest(req, resp, resourceResolver); 
	return out.toString(); 
}

------------------------------------------

